{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Digital Signature Platform is a platform for companies or government organizations to certify or verify any digital contents by the use of blockchain technology. </p> <p> </p> Digital Content Issuance and Verification Process <p>This platform is built  to remove the complexity of integrating the information system directly to the blockchain network itself and replace it with a simple to integrate service yet feature rich web API. The platform allows those organisations to perform digital content (files, digital payload or transactions) issuances at the same time enable the verification process to identifies issuers and approver of those contents without exposing digital file or transactions to third party. </p>"},{"location":"camdl/","title":"CamDL (Cambodia Distributed Ledger)","text":"<p>CamDL is a blockchain network aiming to provide the public a platform for building and experimenting with blockchain technology to solve their everyday challenges within the community or the industry. CamDL is powered by Hyperledger Besu\u00ae, an open source Ethereum client developed under Apache 2.0 license written in Java. Click to learn more</p> <p>CamDL works toward creating the best open blockchain infrastructure, retaining a focus on bringing health and wealth into the recently growing global blockchain superstructure as we reach out to all network users both locally and worldwide.</p> <p> </p> CamDL Potential Use Cases"},{"location":"contract-integrate/","title":"Smart Contract (Coming Soon)","text":"<p>Developer could interact directly with smart contract hosted on CamDL network without the need to connect to Digital Signature platform. This further increase trusts with the platform yet still can get full functionality offers by the platform. This requires developer who has deeper knowledge with interaction to the blockchain network and maintaining CamDL compute credit to make sure the trasaction is successfully mined by the network</p> <p> </p> Smart Contract Integration Flow"},{"location":"java-sdk/","title":"Java SDK","text":"<p>For Java developers who want to work closely with CamDX Digital Signature System, we've got you covered. We've offered a few options and Java SDK is one of them. More languages are coming soon, and they currently are in our release pipeline  The following steps will get you ready to use our Java SDK.</p>"},{"location":"java-sdk/#installation","title":"Installation","text":"<p>Before getting started, make sure you have our repository cloned. If you haven't, please refer to this link to clone the repository </p>"},{"location":"java-sdk/#installing-dependency","title":"Installing Dependency","text":"<p>After cloning the repository, go to the project directory and into wrapper-service. After that, you can execute <code>lib_bash_install.sh</code> for MacOS and Linux user, or <code>lib_win_install.bat</code> if you're using Windows. </p> Note <p>Currently, you can only install the required dependencies via Maven. For those of you who are Gradle users, fear not, Gradle support is coming sooner than expected. Be patient </p>"},{"location":"java-sdk/#setting-up-environment","title":"Setting up environment","text":"<p>Please provide your private key and api server url to consume the API</p>"},{"location":"java-sdk/#usage","title":"Usage","text":"<p>CamDX Digital Signature System provide 4 basic functionalities such as</p> <ul> <li>Sign transaction</li> <li>Approve transaction that'd been signed</li> <li>Revoke transaction that'd been signed or approved</li> <li>Verify transaction signature   Details of each functionality will be listed below</li> </ul>"},{"location":"java-sdk/#signing-transaction","title":"Signing Transaction","text":""},{"location":"java-sdk/#sign-relay-file","title":"signRelayFile","text":"<p>Add a digital signature on the current file as InputStream. The file hash will be calculated using SHA-256 hashing algorithm. <code>cid</code> is optional. If you have the file upload to an IPFS, you can also provide the file cid. <code>signers</code> is a list of user addresses that needed to be signed on the transaction. This method return a TransactionReceipt</p> <pre><code>TransactionReceipt signRelayFile(InputStream inputStream, String cid, List&lt;String&gt; signers) throws IOException, NoSuchAlgorithmException, DisigException;\n</code></pre> Note <p>You can also include your own address in list of signers. However, you can not sign a transaction with empty signers.</p>"},{"location":"java-sdk/#signrelayhash","title":"signRelayHash","text":"<p>If you prefer to generate file hash, this method is optimized specifically for that purpose. It accepts hex encoded hash of the file, and the rest of the arguments remains the same, and also returns TransactionReceipt</p> <pre><code>TransactionReceipt signRelayHash(String hashHexEncode, String cid, List&lt;String&gt; signers) throws DisigException, NoSuchAlgorithmException, JsonProcessingException;\n</code></pre>"},{"location":"java-sdk/#signrelaystring","title":"signRelayString","text":"<p>Similar to signRelayFile you can also use the content of the transaction as string format for digital signature. Instead of the accepting the file, the first argument of the method accepts a string content of transaction, however, the rest of the method arguments remain unchanged.</p> <pre><code>TransactionReceipt signRelayString(String inputString, String cid, List&lt;String&gt; signers) throws NoSuchAlgorithmException, DisigException, JsonProcessingException;\n</code></pre>"},{"location":"java-sdk/#approving-a-signature","title":"Approving a signature","text":""},{"location":"java-sdk/#approve-relay-file","title":"Java SDK","text":""},{"location":"java-sdk/#approverelayfile","title":"approveRelayFile","text":"<p>After a signature has been added to a file, it is not automatically signed. Your consent is essential for a digital signature. If you want to approve your signature that's been signed by someone else to a file, this method will do the job. It accepts file as InputStream and returns a TransactionReceipt.</p> <pre><code>TransactionReceipt approveRelayFile(InputStream inputStream) throws IOException, NoSuchAlgorithmException, DisigException;\n</code></pre>"},{"location":"java-sdk/#approverelayhash","title":"approveRelayHash","text":"<p>If a signature has been signed on a transaction using hash in hex encoded format, the method is suitable for adding your consent to the signature corelates to the hash that's been signed. This method accept hex encoded hash instead of file InputStream, and returns TransactionReceipt.</p> <pre><code>TransactionReceipt approveRelayFile(InputStream inputStream) throws IOException, NoSuchAlgorithmException, DisigException;\n</code></pre>"},{"location":"java-sdk/#approverelaystring","title":"approveRelayString","text":"<p>Similarly, if the transaction was using content of file as string format, this method can be used to approve your signature on the transaction. This method accepts string instead of file InputStream.</p> <pre><code>TransactionReceipt approveRelayString(String inputString) throws NoSuchAlgorithmException, DisigException, JsonProcessingException;\n</code></pre>"},{"location":"java-sdk/#revoking-a-signature","title":"Revoking a signature","text":""},{"location":"java-sdk/#revokerelayfile","title":"revokeRelayFile","text":"<p>Accidentally approve a signature or don't want your consent on a signature? Don't worry  We got you cover, this method is like the opposite method of approveRelayFile and we think there's no better explain this </p> <pre><code>TransactionReceipt revokeRelayFile(InputStream inputStream) throws IOException, NoSuchAlgorithmException, DisigException;\n</code></pre>"},{"location":"java-sdk/#revokerelayhash","title":"revokeRelayHash","text":"<p>This method is equivalent to the method above but it accepts hash file in hex format.</p> <pre><code>TransactionReceipt revokeRelayHash(String hashHexEncode) throws DisigException, NoSuchAlgorithmException, JsonProcessingException;\n</code></pre>"},{"location":"java-sdk/#revokerelaystring","title":"revokeRelayString","text":"<p>This method is equivalent to the method above but it accepts content of file in string format.</p> <pre><code>TransactionReceipt revokeRelayString(String inputString) throws NoSuchAlgorithmException, DisigException, JsonProcessingException;\n</code></pre>"},{"location":"java-sdk/#verifying-signatures","title":"Verifying signatures","text":""},{"location":"java-sdk/#verifyfile","title":"verifyFile","text":"<p>This method accept a transaction file as inputStream, calculate hash of the file then returns SignerResponse, which includes signatures that have been signed on the file including the status of each signatures.</p> <pre><code>SignerResponse verifyFile(InputStream inputStream) throws IOException, NoSuchAlgorithmException, DisigException;\n</code></pre>"},{"location":"java-sdk/#verifyhash","title":"verifyHash","text":"<p>If the transaction was signed using hashed calculated by the signer, this method can be used to verify the signature and similar to the method above also returns SignerResponse.</p> <pre><code>SignerResponse verifyHash(String hashHexEncode) throws DisigException, JsonProcessingException;\n</code></pre>"},{"location":"java-sdk/#verifystring","title":"verifyString","text":"<p>On the hand, signer can also uses raw content of transaction as string format to sign the transaction, in this case this method is used for verify it signatures, which returns SignerResponse.</p> <pre><code>SignerResponse verifyString(String inputString) throws NoSuchAlgorithmException, DisigException, JsonProcessingException;\n</code></pre>"},{"location":"java-sdk/#dto","title":"Dto","text":"<p>Refer to Dto object body such as <code>SignerResponse</code>, <code>ApprovalDto</code>, <code>CertificateResponse</code>, <code>TransactionReceipt</code></p>"},{"location":"java-sdk/#signer-response","title":"Java SDK","text":""},{"location":"java-sdk/#signerresponse","title":"SignerResponse","text":"SignerResponse.java<pre><code>@Data\npublic class SignerResponse {\nString hash;\nString cid;\nList&lt;ApproverDto&gt; signers;\n}\n</code></pre>"},{"location":"java-sdk/#approval-dto","title":"Java SDK","text":""},{"location":"java-sdk/#approvaldto","title":"ApprovalDto","text":"ApprovalDto.java<pre><code>@Data\npublic class ApproverDto {\nString walletAddress;\nint status;\nString statusString;\nCertificateResponse certInfo;\n}\n</code></pre>"},{"location":"java-sdk/#certificate-response","title":"Java SDK","text":""},{"location":"java-sdk/#certificateresponse","title":"CertificateResponse","text":"CertificateResponse.java<pre><code>@Data\npublic class CertificateResponse {\nString serialNumber;\nString subject;\nString commonName;\nString org;\nString orgUnit;\nString country;\nString email;\nString pubKey;\nTimestamp notBefore;\nTimestamp notAfter;\nString certificateChain;\n}\n</code></pre>"},{"location":"java-sdk/#transaction-receipt","title":"Java SDK","text":""},{"location":"java-sdk/#transactionreceipt","title":"TransactionReceipt","text":"TransactionReceipt.java<pre><code>@Data\npublic class TransactionReceipt {\nprivate String transactionHash;\nprivate String transactionIndex;\nprivate String blockHash;\nprivate String blockNumber;\nprivate String cumulativeGasUsed;\nprivate String gasUsed;\nprivate String contractAddress;\nprivate String root;\nprivate String status;\nprivate String from;\nprivate String to;\nprivate List&lt;Log&gt; logs;\nprivate String logsBloom;\nprivate String revertReason;\nprivate String type;\nprivate String effectiveGasPrice;\n}\n</code></pre>"},{"location":"node-sdk/","title":"Node SDK (Coming Soon)","text":""},{"location":"pki/","title":"Public Key Infrastructure","text":""},{"location":"privacy/","title":"Privacy","text":"<p>By the use of hashing algoritm, organisation could issue any digital content on the platform without the need of exposing the whole file itself to the public through the nature of one way function of hashing algorithm. Issuer is then required to publish the fixed length of hash result (32 bytes) through the portal which then store on CamDL blockchain network. Only those who got hold the original digital content of the file could perform hashing and obtain the result published on the ledger which could guarantee the immutability and originality of the digital content from the issuance organisation.</p> <p>Digital signature platform uses SHA-256 (Secure Hash Algorithm 2 - 256 bits). SHA-2 was first published by the National Institute of Standards and Technology (NIST) as a U.S. federal standard. More Info</p> <p> Hashing Algorithm Overview: Types, Methodologies &amp; Usage   </p>"},{"location":"registration/","title":"Registration","text":"<p>Before integrating with CamDX Digital Signature with your current system. You need to generate a new private key as well as a Certificate Signing Request(CSR) corresponding to the private key. You will need to submit the CSR manual via Digital Signature Adminstrator to get a certificate and complete the registration process. Through out the registration process, we'll be using OpenSSL. Please make sure you have it installed on your machine before proceeding.</p>"},{"location":"registration/#key-generation","title":"Key Generation","text":"<p>As of now, CamDX Digital Signature only support Eliptic Curve algorithm using curve secp256k1. Therefore, it's important to generate a private using the supported EC curves, which you do archive using the following command:</p> <pre><code>openssl ecparam -name secp256k1 -genkey | openssl ec -out private.key\n</code></pre> <p>The command above uses OpenSSL to generate a private key file name private.key using EC algorithm with secp256k1 curve, which can be used to create a Certificate Signing Request.</p>"},{"location":"registration/#certificate-signing-request-csr","title":"Certificate Signing Request (CSR)","text":"<p>After you've generated a private key, it will be used to create Certificate Signing Request, which will be done using the following command:</p> <pre><code>openssl req -out certificate_signing_req.csr -key private.key -new\n</code></pre> <p>Upon entering this command, you will be asked to complete your organization information. Below is an example you can follow:</p> Prompt Example Country Name (2 letter code): KH State or Province Name (full name): Phnom Penh Locality Name (eg, city): Phnom Penh Organization Name (eg, company): Ministry of Economy and Finance Organizational Unit Name (eg, section): Techo Startup Center Common Name (eg, fully qualified host name): Technology and Innovation Email Address: Warning <p>Please leave the password prompt blank. We won't be able to validate your CSR if you encrypt it with password </p> <p>After creating a CSR successfully, you will need to submit it manually to Digital Signature Adminstrations to get a valid certificate, which you can use for signing and verifying your transaction.</p>"},{"location":"registration/#extract-key","title":"Registration","text":""},{"location":"registration/#extract-private-key-from-pem-format","title":"Extract private key from PEM format","text":"<p>There is one more step final being fully ready to use our Digital Signature System. We need to extract private key from the key we've generated above. Here's the following command to archive that:</p> <pre><code>openssl pkey -in private.key -text | sed -n '/priv:/,/pub:/p' | sed -e '1d;$d' | tr -d ':'| tr -d ' ' | tr -d '\\n' &amp;&amp; echo\n</code></pre>"},{"location":"svc/","title":"Wrapper Service","text":"<p>This wrapper service abstracts all implementations and make it easy for organisations to integrate with digital signature with less modification over the existing systems, programing language and framework independent or knowledge of blockchain technology. This is offered in the form of docker image for developer to host as a separate docker container service along side their existing service, which can be interacted through API call to perform actions related with digital signature.</p> <p> </p> Wrapper Service Integration Flow"},{"location":"svc/#get-started","title":"Get started","text":"<p>Clone our integration repository</p> <p><pre><code>git clone https://github.com/Techo-Startup-Center/CamDX-Digital-Signature-Integration.git\n</code></pre> Go into cloned directory. Modify <code>docker-compose.yml</code> environment variables:</p> <ul> <li>spring.servlet.multipart.max-file-size: maximum file size for multipart upload</li> <li>spring.servlet.multipart.max-request-size: maximum file size for multipart upload</li> <li>camdx.disig.server-url: url for disig platform either development or production</li> <li>camdx.disig.private-key: extracted private key how to get private key.</li> </ul> <p>After modification run</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"svc/#api-catelog","title":"API Catelog","text":"<p>Please refer to this link for API catelog of this wrapper service</p>"},{"location":"svc/#request-body-for-apis","title":"Request Body for APIs","text":""},{"location":"svc/#file-request-type","title":"File Request Type","text":"<ul> <li><code>/api/v1.0/approve/file</code>, <code>/api/v1.0/verify/file</code>, <code>/api/v1.0/revoke/file</code> FileRequest.java<pre><code>@Data\npublic class FileRequest {\nMultipartFile file;\n}\n</code></pre></li> <li><code>/api/v1.0/sign/file</code> SignFileRequest.java<pre><code>@Data\npublic class SignFileRequest{\nMultipartFile file;\nprivate String cid;\nprivate List&lt;String&gt; signers;\n}\n</code></pre></li> </ul>"},{"location":"svc/#string-request-type","title":"String Request Type","text":"<ul> <li><code>/api/v1.0/approve/string</code>, <code>/api/v1.0/verify/string</code>, <code>/api/v1.0/revoke/string</code> StringRequest.java<pre><code>@Data\npublic class StringRequest {\nString payloadString;\n}\n</code></pre></li> <li><code>/api/v1.0/sign/string</code> SignStringRequest.java<pre><code>@Data\npublic class SignStringRequest{\nString payloadString;\nprivate String cid;\nprivate List&lt;String&gt; signers;\n}\n</code></pre></li> </ul>"},{"location":"svc/#hash-request-type","title":"Hash Request Type","text":"<ul> <li><code>/api/v1.0/approve/hash</code>, <code>/api/v1.0/verify/hash</code>, <code>/api/v1.0/revoke/hash</code> HashRequest.java<pre><code>@Data\npublic class HashRequest {\nString hashHex;\n}\n</code></pre></li> <li><code>/api/v1.0/sign/string</code> SignStringRequest.java<pre><code>@Data\npublic class SignHashRequest{\nString hashHex;\nprivate String cid;\nprivate List&lt;String&gt; signers;\n}\n</code></pre></li> </ul>"},{"location":"integration/","title":"Integration","text":"<p>There are 3 mode of integration organisation are able to choose to connect with digital signature platform</p>"},{"location":"integration/#wrapper-service","title":"Wrapper service","text":"<p>This wrapper service abstracts all implementations and make it easy for organisations to integrate with digital signature with less modification over the existing systems, programing language and framework independent or knowledge of blockchain technology. This is offered in the form of docker image for developer to host as a separate docker container service along side their existing service, which can be interacted through API call to perform actions related with digital signature.</p>"},{"location":"integration/#sdk","title":"SDK","text":"<p>Platform offer various SDKs for different programming languages for developer to integrate with their application to facilitate the integration with digital signature platform. Developer can use the provided SDK to interact with digital signature with the provided code example from our documentation.</p>"},{"location":"integration/#smart-contract","title":"Smart Contract","text":"<p>Developer could interact directly with smart contract hosted on CamDL network without the need to connect to Digital Signature platform. This further increase trusts with the platform yet still can get full functionality offers by the platform. This requires developer who has deeper knowledge with interaction to the blockchain network and maintaining CamDL compute credit to make sure the trasaction is successfully mined by the network</p>"},{"location":"sdk/","title":"SDK","text":"<p>Platform offer various SDKs for different programming languages for developer to integrate with their application to facilitate the integration with digital signature platform. Developer can use the provided SDK to interact with digital signature with the provided code example from our documentation.</p> <p> </p> SDK Integration Flow"}]}